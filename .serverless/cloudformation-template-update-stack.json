{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "GetAllCandidatesFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-getAllCandidatesFunction"
      }
    },
    "StartTestDashboardLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-startTestDashboard"
      }
    },
    "StartTestInProgressDashboardLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-startTestInProgressDashboard"
      }
    },
    "UpdateBookingAfterStartTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-updateBookingAfterStartTest"
      }
    },
    "GetAllQsnIdsByQuestionPaperIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-getAllQsnIdsByQuestionPaperId"
      }
    },
    "UpdateResultFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-updateResultFunction"
      }
    },
    "CreateQuestionFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-createQuestionFunction"
      }
    },
    "GetQuestionByCategoryFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-getQuestionByCategoryFunction"
      }
    },
    "CreateQsnPaperLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-createQsnPaper"
      }
    },
    "GetQuestionPaperNamesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-getQuestionPaperNames"
      }
    },
    "GetQuestionPaperNamesByCategoryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-getQuestionPaperNamesByCategory"
      }
    },
    "CreateTestLinkFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-createTestLinkFunction"
      }
    },
    "GetCandidateHomePageInfoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-getCandidateHomePageInfo"
      }
    },
    "GetTestStausInfoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-getTestStausInfo"
      }
    },
    "UpdateExamBookingTimingsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-updateExamBookingTimings"
      }
    },
    "UpdateCandidateInfoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-updateCandidateInfo"
      }
    },
    "InsertCandidateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-insertCandidate"
      }
    },
    "GetCandidateInfoForViewLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-getCandidateInfoForView"
      }
    },
    "RegisterCandidatesAndEmailPostRegistrationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-registerCandidatesAndEmailPostRegistration"
      }
    },
    "UpdateCandidateTOElasticSearchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-updateCandidateTOElasticSearch"
      }
    },
    "PerformESUpdateForBookingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-performESUpdateForBooking"
      }
    },
    "ProcessRegistrationStreamLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlist-project-dev-processRegistrationStream"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "shortlist-project",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getAllCandidatesFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-startTestDashboard:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-startTestInProgressDashboard:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-updateBookingAfterStartTest:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getAllQsnIdsByQuestionPaperId:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-updateResultFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-createQuestionFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getQuestionByCategoryFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-createQsnPaper:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getQuestionPaperNames:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getQuestionPaperNamesByCategory:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-createTestLinkFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getCandidateHomePageInfo:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getTestStausInfo:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-updateExamBookingTimings:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-updateCandidateInfo:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-insertCandidate:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getCandidateInfoForView:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-registerCandidatesAndEmailPostRegistration:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-updateCandidateTOElasticSearch:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-performESUpdateForBooking:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-processRegistrationStream:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getAllCandidatesFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-startTestDashboard:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-startTestInProgressDashboard:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-updateBookingAfterStartTest:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getAllQsnIdsByQuestionPaperId:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-updateResultFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-createQuestionFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getQuestionByCategoryFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-createQsnPaper:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getQuestionPaperNames:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getQuestionPaperNamesByCategory:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-createTestLinkFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getCandidateHomePageInfo:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getTestStausInfo:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-updateExamBookingTimings:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-updateCandidateInfo:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-insertCandidate:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-getCandidateInfoForView:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-registerCandidatesAndEmailPostRegistration:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-updateCandidateTOElasticSearch:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-performESUpdateForBooking:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlist-project-dev-processRegistrationStream:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kinesis:DescribeStream",
                    "kinesis:GetRecords",
                    "kinesis:PutRecords",
                    "kinesis:GetShardIterator",
                    "kinesis:ListStreams",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:kinesis:us-east-1:675565166163:stream/register-test-stream"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/candidate/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/candidate"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:PutRecords",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/booking/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/booking"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/question"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/questionPaperNames"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/questionPaper"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/questionPaper/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/result/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish",
                    "sns:Subscribe"
                  ],
                  "Resource": "arn:aws:sns:us-east-1:675565166163:sendEmail"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kinesis:DescribeStream",
                    "kinesis:GetRecords",
                    "kinesis:PutRecords",
                    "kinesis:PutRecord",
                    "kinesis:GetShardIterator",
                    "kinesis:ListStreams",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:kinesis:us-east-1:675565166163:stream/register-test-stream"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:Invoke"
                  ],
                  "Resource": "arn:aws:execute-api:us-east-1:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": "SES:SendEmail",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "candidate",
                        "StreamArn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "booking",
                        "StreamArn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kinesis:GetRecords",
                    "kinesis:GetShardIterator",
                    "kinesis:DescribeStream",
                    "kinesis:ListStreams"
                  ],
                  "Resource": [
                    "arn:aws:kinesis:us-east-1:675565166163:stream/register-test-stream"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "shortlist-project",
              "dev",
              "us-east-1",
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GetAllCandidatesFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-getAllCandidatesFunction",
        "Handler": "handler.getAllCandidatesFunction",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "GetAllCandidatesFunctionLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetAllCandidatesFunctionLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllCandidatesFunctionLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "StartTestDashboardLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-startTestDashboard",
        "Handler": "handler.startTestDashboard",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "StartTestDashboardLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "StartTestDashboardLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StartTestDashboardLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "StartTestInProgressDashboardLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-startTestInProgressDashboard",
        "Handler": "handler.startTestInProgressDashboard",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "StartTestInProgressDashboardLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "StartTestInProgressDashboardLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StartTestInProgressDashboardLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "UpdateBookingAfterStartTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-updateBookingAfterStartTest",
        "Handler": "handler.updateBookingAfterStartTest",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "UpdateBookingAfterStartTestLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UpdateBookingAfterStartTestLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateBookingAfterStartTestLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "GetAllQsnIdsByQuestionPaperIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-getAllQsnIdsByQuestionPaperId",
        "Handler": "handler.getAllQsnIdsByQuestionPaperId",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "GetAllQsnIdsByQuestionPaperIdLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetAllQsnIdsByQuestionPaperIdLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllQsnIdsByQuestionPaperIdLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "UpdateResultFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-updateResultFunction",
        "Handler": "handler.updateResultFunction",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "UpdateResultFunctionLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UpdateResultFunctionLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateResultFunctionLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "CreateQuestionFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-createQuestionFunction",
        "Handler": "handler.createQuestionFunction",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "CreateQuestionFunctionLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CreateQuestionFunctionLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateQuestionFunctionLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "GetQuestionByCategoryFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-getQuestionByCategoryFunction",
        "Handler": "handler.getQuestionByCategoryFunction",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "GetQuestionByCategoryFunctionLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetQuestionByCategoryFunctionLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetQuestionByCategoryFunctionLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "CreateQsnPaperLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-createQsnPaper",
        "Handler": "handler.createQuestionPaperFunction",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "CreateQsnPaperLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CreateQsnPaperLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateQsnPaperLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "GetQuestionPaperNamesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-getQuestionPaperNames",
        "Handler": "handler.getQuestionPaperNamesFunction",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "GetQuestionPaperNamesLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetQuestionPaperNamesLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetQuestionPaperNamesLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "GetQuestionPaperNamesByCategoryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-getQuestionPaperNamesByCategory",
        "Handler": "handler.getQuestionPaperNamesByCategoryFunction",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "GetQuestionPaperNamesByCategoryLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetQuestionPaperNamesByCategoryLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetQuestionPaperNamesByCategoryLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "CreateTestLinkFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-createTestLinkFunction",
        "Handler": "handler.createTestLinkFunction",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "CreateTestLinkFunctionLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CreateTestLinkFunctionLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateTestLinkFunctionLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "GetCandidateHomePageInfoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-getCandidateHomePageInfo",
        "Handler": "handler.getCandidateHomePageInfo",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "GetCandidateHomePageInfoLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetCandidateHomePageInfoLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCandidateHomePageInfoLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "GetTestStausInfoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-getTestStausInfo",
        "Handler": "handler.getTestStausInfo",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "GetTestStausInfoLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetTestStausInfoLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTestStausInfoLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "UpdateExamBookingTimingsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-updateExamBookingTimings",
        "Handler": "handler.updateExamBookingTimings",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "UpdateExamBookingTimingsLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UpdateExamBookingTimingsLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateExamBookingTimingsLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "UpdateCandidateInfoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-updateCandidateInfo",
        "Handler": "handler.updateCandidateInfo",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "UpdateCandidateInfoLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UpdateCandidateInfoLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCandidateInfoLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "InsertCandidateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-insertCandidate",
        "Handler": "handler.insertCandidate",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "InsertCandidateLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "InsertCandidateLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "InsertCandidateLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "GetCandidateInfoForViewLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-getCandidateInfoForView",
        "Handler": "handler.getCandidateInfoForView",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "GetCandidateInfoForViewLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetCandidateInfoForViewLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCandidateInfoForViewLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "RegisterCandidatesAndEmailPostRegistrationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-registerCandidatesAndEmailPostRegistration",
        "Handler": "handler.registerCandidatesAndEmailPostRegistration",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "RegisterCandidatesAndEmailPostRegistrationLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "RegisterCandidatesAndEmailPostRegistrationLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterCandidatesAndEmailPostRegistrationLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "UpdateCandidateTOElasticSearchLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-updateCandidateTOElasticSearch",
        "Handler": "handler.updateCandidateTOElasticSearch",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "UpdateCandidateTOElasticSearchLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UpdateCandidateTOElasticSearchLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCandidateTOElasticSearchLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "PerformESUpdateForBookingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-performESUpdateForBooking",
        "Handler": "handler.performESUpdateForBooking",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "PerformESUpdateForBookingLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PerformESUpdateForBookingLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PerformESUpdateForBookingLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "ProcessRegistrationStreamLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlist-project/dev/1495712847900-2017-05-25T11:47:27.900Z/shortlist-project.zip"
        },
        "FunctionName": "shortlist-project-dev-processRegistrationStream",
        "Handler": "handler.processRegistrationStream",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "streamExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 20,
        "Environment": {
          "Variables": {
            "ACCOUNT_ID": 675565166163,
            "REGISTER_TEST_STREAM": "register-test-stream",
            "CANDIDATE_TABLE": "candidate",
            "BOOKING_TABLE": "booking",
            "SEND_EMAIL_SNS": "sendEmail",
            "QUESTION_LIST_TABLE": "question",
            "QSNID_TABLE": "questionPaper",
            "CATEGORY_TABLE": "category",
            "QUESTION_PAPER_NAMES": "questionPaperNames",
            "RESULT_TABLE": "result",
            "KINESIS_STREAM_REGION": "us-east-1",
            "REGION": "us-east-1",
            "ELASTICSEARCH_ENDPOINT": "http://localhost:9200"
          }
        }
      },
      "DependsOn": [
        "ProcessRegistrationStreamLogGroup",
        "streamExecutionRole"
      ]
    },
    "ProcessRegistrationStreamLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ProcessRegistrationStreamLambdaFunction"
        },
        "CodeSha256": "DF9l0uOybnrUX/nkVkxrOQCukPCYyqhjWQ1PrfdsT6s="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-shortlist-project"
      }
    },
    "ApiGatewayResourceApi": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "api",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiAllcandidates": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "allcandidates",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiStarttestdashboard": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "starttestdashboard",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiStarttestinprogressdashboard": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "startTestInProgressDashboard",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiUpdatebookingafterstarttest": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "updateBookingAfterStartTest",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetallqsnids": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "getAllQsnIds",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiUpdateresult": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "updateResult",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiCreatequestion": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "createquestion",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetquestionbycategory": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "getquestionbycategory",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiQuestionpaper": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "questionpaper",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetquestionpapernames": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "getquestionpapernames",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetquestionpapernamesbycategory": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "getquestionpapernamesbycategory",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiTestlink": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "testlink",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiCandidatehomepage": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "candidatehomePage",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiTestlinkinfo": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "testLinkInfo",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiUpdateexamtimingslot": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "updateExamTimingSlot",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiUpdatecandidate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "updateCandidate",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiInsertcandidate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "insertCandidate",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetcandidateinfoforview": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "getCandidateInfoForView",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiRegistercandidates": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "registerCandidates",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiStarttestdashboardCandidateid": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiStarttestdashboard"
        },
        "PathPart": "candidateId",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetallqsnidsBookingid": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetallqsnids"
        },
        "PathPart": "BookingId",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetquestionbycategoryCategory": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetquestionbycategory"
        },
        "PathPart": "Category",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetquestionpapernamesbycategoryCategory": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetquestionpapernamesbycategory"
        },
        "PathPart": "category",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiCandidatehomepageCandidateinfo": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiCandidatehomepage"
        },
        "PathPart": "candidateinfo",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiTestlinkinfoTestlinkinfoVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiTestlinkinfo"
        },
        "PathPart": "{testLinkInfo}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetcandidateinfoforviewCandidateid": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetcandidateinfoforview"
        },
        "PathPart": "candidateId",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiStarttestdashboardCandidateidCandidateidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiStarttestdashboardCandidateid"
        },
        "PathPart": "{candidateId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetallqsnidsBookingid"
        },
        "PathPart": "{bookingId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetquestionbycategoryCategoryCategoryVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetquestionbycategoryCategory"
        },
        "PathPart": "{Category}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetquestionpapernamesbycategoryCategoryCategoryVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetquestionpapernamesbycategoryCategory"
        },
        "PathPart": "{category}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiCandidatehomepageCandidateinfoCandidateinfoVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiCandidatehomepageCandidateinfo"
        },
        "PathPart": "{candidateinfo}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetcandidateinfoforviewCandidateidIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetcandidateinfoforviewCandidateid"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiStarttestdashboardCandidateidCandidateidVarBookingid": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiStarttestdashboardCandidateidCandidateidVar"
        },
        "PathPart": "bookingId",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperid": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVar"
        },
        "PathPart": "QuestionPaperId",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetquestionbycategoryCategoryCategoryVarLastqsnid": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetquestionbycategoryCategoryCategoryVar"
        },
        "PathPart": "LastqsnId",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiStarttestdashboardCandidateidCandidateidVarBookingidBookingidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiStarttestdashboardCandidateidCandidateidVarBookingid"
        },
        "PathPart": "{bookingId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperid"
        },
        "PathPart": "{questionPaperId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetquestionbycategoryCategoryCategoryVarLastqsnidLastqsnidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetquestionbycategoryCategoryCategoryVarLastqsnid"
        },
        "PathPart": "{LastqsnId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiStarttestdashboardCandidateidCandidateidVarBookingidBookingidVarTeststatus": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiStarttestdashboardCandidateidCandidateidVarBookingidBookingidVar"
        },
        "PathPart": "testStatus",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVarCurtqsnno": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVar"
        },
        "PathPart": "CurtQsnNo",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiStarttestdashboardCandidateidCandidateidVarBookingidBookingidVarTeststatusTeststatusVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiStarttestdashboardCandidateidCandidateidVarBookingidBookingidVarTeststatus"
        },
        "PathPart": "{testStatus}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVarCurtqsnnoCurrentqsnnoVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVarCurtqsnno"
        },
        "PathPart": "{currentQsnNo}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVarCurtqsnnoCurrentqsnnoVarCategory": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVarCurtqsnnoCurrentqsnnoVar"
        },
        "PathPart": "Category",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVarCurtqsnnoCurrentqsnnoVarCategoryCategoryVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVarCurtqsnnoCurrentqsnnoVarCategory"
        },
        "PathPart": "{category}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiAllcandidatesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiAllcandidates"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiStarttestdashboardCandidateidCandidateidVarBookingidBookingidVarTeststatusTeststatusVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiStarttestdashboardCandidateidCandidateidVarBookingidBookingidVarTeststatusTeststatusVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiStarttestinprogressdashboardOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiStarttestinprogressdashboard"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiUpdatebookingafterstarttestOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiUpdatebookingafterstarttest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVarCurtqsnnoCurrentqsnnoVarCategoryCategoryVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVarCurtqsnnoCurrentqsnnoVarCategoryCategoryVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiUpdateresultOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiUpdateresult"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiCreatequestionOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiCreatequestion"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiGetquestionbycategoryCategoryCategoryVarLastqsnidLastqsnidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiGetquestionbycategoryCategoryCategoryVarLastqsnidLastqsnidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiQuestionpaperOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiQuestionpaper"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiGetquestionpapernamesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiGetquestionpapernames"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiGetquestionpapernamesbycategoryCategoryCategoryVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiGetquestionpapernamesbycategoryCategoryCategoryVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiTestlinkOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiTestlink"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiCandidatehomepageCandidateinfoCandidateinfoVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiCandidatehomepageCandidateinfoCandidateinfoVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiTestlinkinfoTestlinkinfoVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiTestlinkinfoTestlinkinfoVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiUpdateexamtimingslotOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiUpdateexamtimingslot"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiUpdatecandidateOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiUpdatecandidate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiInsertcandidateOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiInsertcandidate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiGetcandidateinfoforviewCandidateidIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiGetcandidateinfoforviewCandidateidIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiRegistercandidatesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiRegistercandidates"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiAllcandidatesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiAllcandidates"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllCandidatesFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiStarttestdashboardCandidateidCandidateidVarBookingidBookingidVarTeststatusTeststatusVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiStarttestdashboardCandidateidCandidateidVarBookingidBookingidVarTeststatusTeststatusVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "StartTestDashboardLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiStarttestinprogressdashboardGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiStarttestinprogressdashboard"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "StartTestInProgressDashboardLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiUpdatebookingafterstarttestPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiUpdatebookingafterstarttest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateBookingAfterStartTestLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVarCurtqsnnoCurrentqsnnoVarCategoryCategoryVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVarCurtqsnnoCurrentqsnnoVarCategoryCategoryVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllQsnIdsByQuestionPaperIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiUpdateresultPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiUpdateresult"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateResultFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiCreatequestionPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiCreatequestion"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateQuestionFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiGetquestionbycategoryCategoryCategoryVarLastqsnidLastqsnidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiGetquestionbycategoryCategoryCategoryVarLastqsnidLastqsnidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetQuestionByCategoryFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiQuestionpaperPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiQuestionpaper"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateQsnPaperLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiGetquestionpapernamesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiGetquestionpapernames"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetQuestionPaperNamesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiGetquestionpapernamesbycategoryCategoryCategoryVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiGetquestionpapernamesbycategoryCategoryCategoryVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetQuestionPaperNamesByCategoryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiTestlinkPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiTestlink"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateTestLinkFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiCandidatehomepageCandidateinfoCandidateinfoVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiCandidatehomepageCandidateinfoCandidateinfoVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetCandidateHomePageInfoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiTestlinkinfoTestlinkinfoVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiTestlinkinfoTestlinkinfoVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetTestStausInfoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiUpdateexamtimingslotPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiUpdateexamtimingslot"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateExamBookingTimingsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiUpdatecandidatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiUpdatecandidate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateCandidateInfoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiInsertcandidatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiInsertcandidate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "InsertCandidateLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiGetcandidateinfoforviewCandidateidIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiGetcandidateinfoforviewCandidateidIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetCandidateInfoForViewLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodApiRegistercandidatesPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiRegistercandidates"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RegisterCandidatesAndEmailPostRegistrationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1495712848133": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodApiAllcandidatesGet",
        "ApiGatewayMethodApiStarttestdashboardCandidateidCandidateidVarBookingidBookingidVarTeststatusTeststatusVarGet",
        "ApiGatewayMethodApiStarttestinprogressdashboardGet",
        "ApiGatewayMethodApiUpdatebookingafterstarttestPost",
        "ApiGatewayMethodApiGetallqsnidsBookingidBookingidVarQuestionpaperidQuestionpaperidVarCurtqsnnoCurrentqsnnoVarCategoryCategoryVarGet",
        "ApiGatewayMethodApiUpdateresultPost",
        "ApiGatewayMethodApiCreatequestionPost",
        "ApiGatewayMethodApiGetquestionbycategoryCategoryCategoryVarLastqsnidLastqsnidVarGet",
        "ApiGatewayMethodApiQuestionpaperPost",
        "ApiGatewayMethodApiGetquestionpapernamesGet",
        "ApiGatewayMethodApiGetquestionpapernamesbycategoryCategoryCategoryVarGet",
        "ApiGatewayMethodApiTestlinkPost",
        "ApiGatewayMethodApiCandidatehomepageCandidateinfoCandidateinfoVarGet",
        "ApiGatewayMethodApiTestlinkinfoTestlinkinfoVarGet",
        "ApiGatewayMethodApiUpdateexamtimingslotPost",
        "ApiGatewayMethodApiUpdatecandidatePost",
        "ApiGatewayMethodApiInsertcandidatePost",
        "ApiGatewayMethodApiGetcandidateinfoforviewCandidateidIdVarGet",
        "ApiGatewayMethodApiRegistercandidatesPost"
      ]
    },
    "GetAllCandidatesFunctionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllCandidatesFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "StartTestDashboardLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "StartTestDashboardLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "StartTestInProgressDashboardLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "StartTestInProgressDashboardLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateBookingAfterStartTestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateBookingAfterStartTestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAllQsnIdsByQuestionPaperIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllQsnIdsByQuestionPaperIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateResultFunctionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateResultFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateQuestionFunctionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateQuestionFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetQuestionByCategoryFunctionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetQuestionByCategoryFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateQsnPaperLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateQsnPaperLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetQuestionPaperNamesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetQuestionPaperNamesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetQuestionPaperNamesByCategoryLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetQuestionPaperNamesByCategoryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateTestLinkFunctionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateTestLinkFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetCandidateHomePageInfoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCandidateHomePageInfoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetTestStausInfoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTestStausInfoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateExamBookingTimingsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateExamBookingTimingsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateCandidateInfoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCandidateInfoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "InsertCandidateLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "InsertCandidateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetCandidateInfoForViewLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCandidateInfoForViewLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RegisterCandidatesAndEmailPostRegistrationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterCandidatesAndEmailPostRegistrationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateCandidateTOElasticSearchEventSourceMappingDynamodbCandidate": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": {
        "BatchSize": 100,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "candidate",
            "StreamArn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCandidateTOElasticSearchLambdaFunction",
            "Arn"
          ]
        },
        "StartingPosition": "LATEST",
        "Enabled": "True"
      }
    },
    "PerformESUpdateForBookingEventSourceMappingDynamodbBooking": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": {
        "BatchSize": 100,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "booking",
            "StreamArn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "PerformESUpdateForBookingLambdaFunction",
            "Arn"
          ]
        },
        "StartingPosition": "LATEST",
        "Enabled": "True"
      }
    },
    "ProcessRegistrationStreamEventSourceMappingKinesisRegisterteststream": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:kinesis:us-east-1:675565166163:stream/register-test-stream",
        "FunctionName": {
          "Fn::GetAtt": [
            "ProcessRegistrationStreamLambdaFunction",
            "Arn"
          ]
        },
        "StartingPosition": "LATEST",
        "Enabled": "True"
      }
    },
    "RegistrationTestEventStream": {
      "Type": "AWS::Kinesis::Stream",
      "Properties": {
        "Name": "register-test-stream",
        "ShardCount": 1
      }
    },
    "streamExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "RoleName": "KinesisStreamExecutionRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "myPolicyName",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/candidate/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/candidate"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/booking"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/booking/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:us-east-1:675565166163:log-group:/aws/lambda/*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": "SES:SendEmail",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kinesis:DescribeStream",
                    "kinesis:GetRecords",
                    "kinesis:PutRecords",
                    "kinesis:GetShardIterator",
                    "kinesis:ListStreams",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:kinesis:us-east-1:675565166163:stream/register-test-stream"
                }
              ]
            }
          }
        ]
      }
    },
    "booking": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "TableName": "booking",
        "AttributeDefinitions": [
          {
            "AttributeName": "candidateId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "bookingId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "testStatus",
            "AttributeType": "S"
          },
          {
            "AttributeName": "category",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "bookingId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 2,
          "WriteCapacityUnits": 2
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE"
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "testStatusGSI",
            "KeySchema": [
              {
                "AttributeName": "testStatus",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "candidateId",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "NonKeyAttributes": [
                "category",
                "jobPosition"
              ],
              "ProjectionType": "INCLUDE"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "5",
              "WriteCapacityUnits": "5"
            }
          },
          {
            "IndexName": "candidateId-category-index",
            "KeySchema": [
              {
                "AttributeName": "candidateId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "category",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "NonKeyAttributes": [
                "dateOfExam"
              ],
              "ProjectionType": "INCLUDE"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "5",
              "WriteCapacityUnits": "5"
            }
          }
        ]
      }
    },
    "candidate": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "TableName": "candidate",
        "AttributeDefinitions": [
          {
            "AttributeName": "candidateId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "candidateId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 2,
          "WriteCapacityUnits": 2
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE"
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "emailIndex",
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "NonKeyAttributes": [
                "candidateId"
              ],
              "ProjectionType": "INCLUDE"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "5",
              "WriteCapacityUnits": "5"
            }
          }
        ]
      }
    },
    "result": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "TableName": "result",
        "AttributeDefinitions": [
          {
            "AttributeName": "bookingId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "QsnId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "bookingId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "QsnId",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 2,
          "WriteCapacityUnits": 2
        }
      }
    },
    "question": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "TableName": "question",
        "AttributeDefinitions": [
          {
            "AttributeName": "category",
            "AttributeType": "S"
          },
          {
            "AttributeName": "questionId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "category",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "questionId",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 2,
          "WriteCapacityUnits": 2
        }
      }
    },
    "questionPaper": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "TableName": "questionPaper",
        "AttributeDefinitions": [
          {
            "AttributeName": "questionPaperId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "questionId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "category",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "questionPaperId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "questionId",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 2,
          "WriteCapacityUnits": 2
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "categoryIndex",
            "KeySchema": [
              {
                "AttributeName": "category",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "NonKeyAttributes": [
                "questionPaperId",
                "questionId"
              ],
              "ProjectionType": "INCLUDE"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "5",
              "WriteCapacityUnits": "5"
            }
          }
        ]
      }
    },
    "questionPaperNames": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "TableName": "questionPaperNames",
        "AttributeDefinitions": [
          {
            "AttributeName": "questionPaperId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "questionPaperId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 2,
          "WriteCapacityUnits": 2
        }
      }
    },
    "category": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "TableName": "category",
        "AttributeDefinitions": [
          {
            "AttributeName": "category_Id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "category_Id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 2,
          "WriteCapacityUnits": 2
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "GetAllCandidatesFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllCandidatesFunctionLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "StartTestDashboardLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StartTestDashboardLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "StartTestInProgressDashboardLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StartTestInProgressDashboardLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "UpdateBookingAfterStartTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateBookingAfterStartTestLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "GetAllQsnIdsByQuestionPaperIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllQsnIdsByQuestionPaperIdLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "UpdateResultFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateResultFunctionLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "CreateQuestionFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateQuestionFunctionLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "GetQuestionByCategoryFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetQuestionByCategoryFunctionLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "CreateQsnPaperLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateQsnPaperLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "GetQuestionPaperNamesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetQuestionPaperNamesLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "GetQuestionPaperNamesByCategoryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetQuestionPaperNamesByCategoryLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "CreateTestLinkFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateTestLinkFunctionLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "GetCandidateHomePageInfoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCandidateHomePageInfoLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "GetTestStausInfoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTestStausInfoLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "UpdateExamBookingTimingsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateExamBookingTimingsLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "UpdateCandidateInfoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCandidateInfoLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "InsertCandidateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "InsertCandidateLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "GetCandidateInfoForViewLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCandidateInfoForViewLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "RegisterCandidatesAndEmailPostRegistrationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterCandidatesAndEmailPostRegistrationLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "UpdateCandidateTOElasticSearchLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCandidateTOElasticSearchLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "PerformESUpdateForBookingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PerformESUpdateForBookingLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "ProcessRegistrationStreamLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ProcessRegistrationStreamLambdaVersionDF9l0uOybnrUXnkVkxrOQCukPCYyqhjWQ1PrfdsT6s"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.us-east-1.amazonaws.com/dev"
          ]
        ]
      }
    }
  }
}