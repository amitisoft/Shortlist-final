# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

plugins:
  - serverless-webpack

service: shortlist-project

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  environment:
    ACCOUNT_ID: 675565166163 
    REGISTER_TEST_STREAM: register-test-stream
    CANDIDATE_TABLE: candidate
    BOOKING_TABLE: booking
    SEND_EMAIL_SNS: sendEmail
    QUESTION_LIST_TABLE: question
    QSNID_TABLE: questionPaper
    CATEGORY_TABLE: category
    QUESTION_PAPER_NAMES : questionPaperNames
    RESULT_TABLE: result
    KINESIS_STREAM_REGION: us-east-1
    REGION: us-east-1
    ELASTICSEARCH_ENDPOINT: http://localhost:9200
  iamRoleStatements:
    - Effect: Allow
      Action:
        - kinesis:DescribeStream
        - kinesis:GetRecords
        - kinesis:PutRecords
        - kinesis:GetShardIterator
        - kinesis:ListStreams
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: arn:aws:kinesis:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNT_ID}:stream/${self:provider.environment.REGISTER_TEST_STREAM}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CANDIDATE_TABLE}/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CANDIDATE_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:PutRecords
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BOOKING_TABLE}/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BOOKING_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.QUESTION_LIST_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchGetItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.QUESTION_PAPER_NAMES}"  
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.QSNID_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.QSNID_TABLE}/*"      
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.RESULT_TABLE}/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Delete
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CATEGORY_TABLE}"
    - Effect: Allow
      Action:
        - sns:Publish
        - sns:Subscribe
      Resource: "arn:aws:sns:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNT_ID}:${self:provider.environment.SEND_EMAIL_SNS}"
    - Effect: Allow
      Action:
        - kinesis:DescribeStream
        - kinesis:GetRecords
        - kinesis:PutRecords
        - kinesis:PutRecord
        - kinesis:GetShardIterator
        - kinesis:ListStreams
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: arn:aws:kinesis:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNT_ID}:stream/${self:provider.environment.REGISTER_TEST_STREAM}
    - Effect: Allow
      Action:
        - execute-api:Invoke
      Resource: "arn:aws:execute-api:us-east-1:*:*"

    - "Effect": "Allow"
      "Action": "SES:SendEmail"
      "Resource": "*"


functions:
  getAllCandidatesFunction:
    handler: handler.getAllCandidatesFunction
    events:
      - http:
          path: api/allcandidates
          method: get
         # authorizer: arn:aws:lambda: us-east-1:151610303354:function:hr-auth-master-dev-authorize
          cors: true
  startTestDashboard:
    handler: handler.startTestDashboard
    events:
      - http:
          path: api/starttestdashboard/candidateId/{candidateId}/bookingId/{bookingId}/testStatus/{testStatus}
          method: get
         # authorizer: arn:aws:lambda: us-east-1:151610303354:function:hr-auth-master-dev-authorize
          cors: true

  startTestInProgressDashboard:
    handler: handler.startTestInProgressDashboard
    events:
      - http:
          path: api/startTestInProgressDashboard
          method: get
         # authorizer: arn:aws:lambda: us-east-1:151610303354:function:hr-auth-master-dev-authorize
          cors: true

  updateBookingAfterStartTest:
    handler: handler.updateBookingAfterStartTest
    events:
      - http:
          path: api/updateBookingAfterStartTest
          method: post
         # authorizer: arn:aws:lambda: us-east-1:151610303354:function:hr-auth-master-dev-authorize
          cors: true

  getAllQsnIdsByQuestionPaperId:
    handler: handler.getAllQsnIdsByQuestionPaperId
    events:
      - http:
          path: api/getAllQsnIds/BookingId/{bookingId}/QuestionPaperId/{questionPaperId}/CurtQsnNo/{currentQsnNo}/Category/{category}
          method: get
#          authorizer: arn:aws:lambda: us-east-1:917291829364:function:hr-auth-master-dev-authorize
          cors: true

  updateResultFunction:
    handler: handler.updateResultFunction
    events:
      - http:
          path: api/updateResult
          method: post
#          authorizer: arn:aws:lambda: us-east-1:917291829364:function:hr-auth-master-dev-authorize
          cors: true

  createQuestionFunction:
    handler: handler.createQuestionFunction
    events:
      - http:
          path: api/createquestion
          method: post
          cors: true

  getQuestionByCategoryFunction:
    handler: handler.getQuestionByCategoryFunction
    events:
      - http:
          path: api/getquestionbycategory/Category/{Category}/LastqsnId/{LastqsnId}
          method: get
          cors: true

  createQsnPaper:
    handler: handler.createQuestionPaperFunction
    events:
      - http:
          path: api/questionpaper
          method: post
          cors: true

  getQuestionPaperNames:
    handler: handler.getQuestionPaperNamesFunction
    events:
      - http:
          path: api/getquestionpapernames
          method: get
          cors: true   

  getQuestionPaperNamesByCategory:
    handler: handler.getQuestionPaperNamesByCategoryFunction
    events:
      - http:
          path: api/getquestionpapernamesbycategory/category/{category}
          method: get
          cors: true                 

  createTestLinkFunction:
    handler: handler.createTestLinkFunction
    events:
      - http:
          path: api/testlink
          method: post
          cors: true

  getCandidateHomePageInfo:
    handler: handler.getCandidateHomePageInfo
    events:
      - http:
          path: api/candidatehomePage/candidateinfo/{candidateinfo}
          method: get
          cors: true

  getTestStausInfo:
    handler: handler.getTestStausInfo
    events:
      - http:
          path: api/testLinkInfo/{testLinkInfo}
          method: get
          cors: true
  updateExamBookingTimings:
    handler: handler.updateExamBookingTimings
    events:
      - http:
          path: api/updateExamTimingSlot
          method: post
          cors: true
  updateCandidateInfo:
    handler: handler.updateCandidateInfo
    events:
      - http:
          path: api/updateCandidate
          method: post
          cors: true
  insertCandidate:
    handler: handler.insertCandidate
    events:
      - http:
          path: api/insertCandidate
          method: post
          cors: true

  getCandidateInfoForView:
    handler: handler.getCandidateInfoForView
    events:
      - http:
          path: api/getCandidateInfoForView/candidateId/{id}
          method: get
          cors: true

  # registerCandidate:
   # handler: handler.registerCandidate

  registerCandidatesAndEmailPostRegistration:
    handler: handler.registerCandidatesAndEmailPostRegistration
    events:
      - http:
          path: api/registerCandidates
          method: post
          cors: true

  updateCandidateTOElasticSearch:
    handler: handler.updateCandidateTOElasticSearch
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - ${self:provider.environment.CANDIDATE_TABLE}
              - StreamArn

  findESCandidateSearchResult:
    handler: handler.findESCandidateSearchResult
    events:
      - http:
          path: api/findESCandidateSearchResult
          method: post
          cors: true

  findESBookingSearchResult:
    handler: handler.findESBookingSearchResult
    events:
      - http:
          path: api/findESBookingSearchResult
          method: post
          cors: true

  findESResultSearch:
    handler: handler.findESResultSearch
    events:
      - http:
          path: api/findESResultSearch
          method: post
          cors: true
  
  createCategory:
    handler: handler.createCategory
    events:
      - http:
          path: api/createCategory
          method: post
          cors: true
   
  getAllCategories:
    handler: handler.getAllCategories
    events:
      - http:
          path: api/getAllCategories
          method: get
          cors: true

  getCategoryById:
    handler: handler.getCategoryById
    events:
      - http:
          path: api/getCategoryById/{category}
          method: get
          cors: true




  updateResultTOElasticSearch:
    handler: handler.updateResultTOElasticSearch
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - ${self:provider.environment.RESULT_TABLE}
              - StreamArn

  performESUpdateForBooking:
    handler: handler.performESUpdateForBooking
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - ${self:provider.environment.BOOKING_TABLE}
              - StreamArn

  processRegistrationStream:
    handler: handler.processRegistrationStream
    role: streamExecutionRole
    timeout: 20
    events:
      - stream:
          arn: arn:aws:kinesis:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNT_ID}:stream/${self:provider.environment.REGISTER_TEST_STREAM}
          batchSize: 10
          startingPosition: LATEST
          enabled: true

#create all resources
resources:
  Resources:
      RegistrationTestEventStream:
        Type: "AWS::Kinesis::Stream"
        Properties:
          Name: ${self:provider.environment.REGISTER_TEST_STREAM}
          ShardCount: 1

      streamExecutionRole:
        Type: AWS::IAM::Role
        Properties:
          Path: /
          RoleName: KinesisStreamExecutionRole
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action: sts:AssumeRole
          Policies:
            - PolicyName: myPolicyName
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                      - dynamodb:BatchGetItem
                      - dynamodb:GetShardIterator
                      - dynamodb:DescribeStream
                      - dynamodb:ListStreams
                    Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CANDIDATE_TABLE}/*"
                  - Effect: Allow
                    Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                      - dynamodb:BatchGetItem
                      - dynamodb:GetShardIterator
                      - dynamodb:DescribeStream
                      - dynamodb:ListStreams
                    Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CANDIDATE_TABLE}"
                  - Effect: Allow
                    Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                      - dynamodb:GetRecords
                      - dynamodb:GetShardIterator
                      - dynamodb:DescribeStream
                      - dynamodb:ListStreams
                    Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BOOKING_TABLE}"
                  - Effect: Allow
                    Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                      - dynamodb:GetRecords
                      - dynamodb:GetShardIterator
                      - dynamodb:DescribeStream
                      - dynamodb:ListStreams
                    Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BOOKING_TABLE}/*"
                  - Effect: Allow
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource: arn:aws:logs:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNT_ID}:log-group:/aws/lambda/*:*:*
                  - "Effect": "Allow"
                    "Action": "SES:SendEmail"
                    "Resource": "*"
                  - Effect: Allow
                    Action:
                      - kinesis:DescribeStream
                      - kinesis:GetRecords
                      - kinesis:PutRecords
                      - kinesis:GetShardIterator
                      - kinesis:ListStreams
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource: arn:aws:kinesis:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNT_ID}:stream/${self:provider.environment.REGISTER_TEST_STREAM}

      booking:
        Type: 'AWS::DynamoDB::Table'
        DeletionPolicy: Retain
        Properties:
          TableName: ${self:provider.environment.BOOKING_TABLE}
          AttributeDefinitions:
            - AttributeName: candidateId
              AttributeType: S
            - AttributeName: bookingId
              AttributeType: S
            - AttributeName: testStatus
              AttributeType: S
            - AttributeName: category
              AttributeType: S

          KeySchema:
            - AttributeName: bookingId
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2

          StreamSpecification:
            StreamViewType: NEW_IMAGE

          GlobalSecondaryIndexes:
            -
              IndexName: "testStatusGSI"
              KeySchema:
                -
                  AttributeName: "testStatus"
                  KeyType: HASH
                -
                  AttributeName: "candidateId"
                  KeyType: RANGE
              Projection:
                NonKeyAttributes:
                  - "category"
                  - "jobPosition"
                ProjectionType: "INCLUDE"
              ProvisionedThroughput:
                ReadCapacityUnits: "5"
                WriteCapacityUnits: "5"

            -
              IndexName: "candidateId-category-index"
              KeySchema:
                -
                  AttributeName: "candidateId"
                  KeyType: HASH
                -
                  AttributeName: "category"
                  KeyType: RANGE

              Projection:
                NonKeyAttributes:
                  - "dateOfExam"
                ProjectionType: "INCLUDE"

              ProvisionedThroughput:
                ReadCapacityUnits: "5"
                WriteCapacityUnits: "5"

      candidate:
        Type: 'AWS::DynamoDB::Table'
        DeletionPolicy: Retain
        Properties:
          TableName: ${self:provider.environment.CANDIDATE_TABLE}
          AttributeDefinitions:
            - AttributeName: candidateId
              AttributeType: S
            - AttributeName: email
              AttributeType: S
          KeySchema:
            - AttributeName: candidateId
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
          StreamSpecification:
            StreamViewType: NEW_IMAGE
          GlobalSecondaryIndexes:
            -
              IndexName: "emailIndex"
              KeySchema:
                -
                  AttributeName: "email"
                  KeyType: HASH
              Projection:
                NonKeyAttributes:
                  - "candidateId"
                ProjectionType: "INCLUDE"
              ProvisionedThroughput:
                ReadCapacityUnits: "5"
                WriteCapacityUnits: "5"
      result:
        Type: 'AWS::DynamoDB::Table'
        DeletionPolicy: Retain
        Properties:
            TableName: ${self:provider.environment.RESULT_TABLE}
            AttributeDefinitions:
              - AttributeName: candidateId
                AttributeType: S
              - AttributeName: questionId
                AttributeType: S
            KeySchema:
              - AttributeName: candidateId
                KeyType: HASH
              - AttributeName: questionId
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
            StreamSpecification:
              StreamViewType: NEW_IMAGE              

      question:
        Type: 'AWS::DynamoDB::Table'
        DeletionPolicy: Retain
        Properties:
          TableName: ${self:provider.environment.QUESTION_LIST_TABLE}
          AttributeDefinitions:
            - AttributeName: category
              AttributeType: S
            - AttributeName: questionId
              AttributeType: S
          KeySchema:
            - AttributeName: category
              KeyType: HASH
            - AttributeName: questionId
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2

      questionPaper:
        Type: 'AWS::DynamoDB::Table'
        DeletionPolicy: Retain
        Properties:
          TableName: ${self:provider.environment.QSNID_TABLE}
          AttributeDefinitions:
            - AttributeName: questionPaperId
              AttributeType: S
            - AttributeName: questionId
              AttributeType: S
            - AttributeName: category
              AttributeType: S
          KeySchema:
            - AttributeName: questionPaperId
              KeyType: HASH
            - AttributeName: questionId
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
          GlobalSecondaryIndexes:
            -
              IndexName: "categoryIndex"
              KeySchema:
                -
                  AttributeName: "category"
                  KeyType: HASH
              Projection:
                NonKeyAttributes:
                  - "questionPaperId"
                  - "questionId"
                ProjectionType: "INCLUDE"
              ProvisionedThroughput:
                ReadCapacityUnits: "5"
                WriteCapacityUnits: "5"            

      questionPaperNames:
          Type: 'AWS::DynamoDB::Table'
          DeletionPolicy: Retain
          Properties:
            TableName: ${self:provider.environment.QUESTION_PAPER_NAMES}
            AttributeDefinitions:
              - AttributeName: questionPaperId
                AttributeType: S
            KeySchema:
              - AttributeName: questionPaperId
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2

      category:
        Type: 'AWS::DynamoDB::Table'
        DeletionPolicy: Retain
        Properties:
          TableName: ${self:provider.environment.CATEGORY_TABLE}
          AttributeDefinitions:
            - AttributeName: categoryId
              AttributeType: S
          KeySchema:
            - AttributeName: categoryId
              KeyType: HASH
          ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
